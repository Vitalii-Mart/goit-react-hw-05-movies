{"version":3,"file":"static/js/349.78e9de80.chunk.js","mappings":"sNAEaA,EAAOC,EAAAA,EAAAA,GAAH,6KAUJC,EAAOD,EAAAA,EAAAA,GAAH,w5B,SC6BjB,EArCkB,SAAC,GAAgB,IAAdE,EAAa,EAAbA,OACbC,GAAWC,EAAAA,EAAAA,MACjB,OACE,+BACE,SAACL,EAAD,UACGG,EAAOG,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,YAAd,OACV,SAACP,EAAD,WACE,SAAC,KAAD,CAAMQ,GAAE,kBAAaH,GAAMI,MAAO,CAAEC,KAAMR,GAA1C,UACE,2BACGK,GACC,gBACEI,IAAG,yCAAoCJ,GACvCK,IAAG,iBAAYN,GACfO,MAAM,QACNC,OAAO,WAGT,0BAAM,eAER,uBAAIR,UAbCD,EADD,OAsBnB,C,iKC7BYU,E,QAAOhB,EAAAA,IAAH,kE,SC8BjB,EA1Ba,WACX,OAA4BiB,EAAAA,EAAAA,UAAS,IAArC,eAAOf,EAAP,KAAegB,EAAf,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KAgBA,OAdAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,oGAEID,GAAa,GAFjB,UAGuBE,EAAAA,EAAAA,MAHvB,OAGUC,EAHV,OAIIL,EAAUK,GAJd,gDAMIC,QAAQC,IAAR,MANJ,yBAQIL,GAAa,GARjB,6EADc,uBAAC,WAAD,wBAYdM,EACD,GAAE,KAED,6BACE,wBAAI,mBACHP,GAAW,SAACH,EAAD,WAAM,SAACW,EAAA,EAAD,OAAqB,SAACC,EAAA,EAAD,CAAW1B,OAAQA,MAG/D,C,mMC7BD2B,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCAEHR,EAAW,mCAAG,oGACFO,EAAAA,EAAAA,IAAA,qCAAwCC,IADtC,cACnBC,EADmB,yBAElBA,EAASR,KAAKS,SAFI,2CAAH,qDAKXC,EAAQ,mCAAG,WAAMC,GAAN,yFACCL,EAAAA,EAAAA,IAAA,gBAAmBK,EAAnB,oBAAsCJ,IADvC,uBACdP,EADc,EACdA,KADc,kBAEfA,GAFe,2CAAH,sDAKRY,EAAY,mCAAG,WAAMC,GAAN,uFACHP,EAAAA,EAAAA,IAAA,+BACGC,EADH,kBACoBM,IAFjB,cACpBL,EADoB,yBAInBA,EAASR,KAAKS,SAJK,2CAAH,sDAOZK,EAAU,mCAAG,WAAMH,GAAN,yFACDL,EAAAA,EAAAA,IAAA,gBAAmBK,EAAnB,4BAA8CJ,IAD7C,uBAChBP,EADgB,EAChBA,KADgB,kBAEjBA,GAFiB,2CAAH,sDAKVe,EAAU,mCAAG,WAAMJ,GAAN,yFACDL,EAAAA,EAAAA,IAAA,gBAAmBK,EAAnB,4BAA8CJ,IAD7C,uBAChBP,EADgB,EAChBA,KADgB,kBAEjBA,GAFiB,2CAAH,qD","sources":["components/MovieList/MovieList.styled.jsx","components/MovieList/MovieList.jsx","pages/Home/Home.styled.jsx","pages/Home/Home.jsx","services/Api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: center;\n  gap: 15px;\n  padding: 0 0 20px 0;\n  margin-top: 10px;\n`;\n\nexport const Item = styled.li`\n  overflow: hidden;\n  border-radius: 5px;\n  border: solid 2px aqua;\n  transition-duration: 400ms;\n  :hover {\n    transform: scale(1.03);\n    transition-duration:  400ms;\n    box-shadow: 0 1px 4px #0000004d, -23px 0 20px -23px #000c,\n      23px 0 20px -23px #000c, inset 0 0 40px #0000001a;\n  }\n  & a {\n    color: #000000;\n    & div {\n      text-align: center;\n      width: 250px;\n      height: 460px;\n      & span {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        height: 376px;\n        border-bottom: solid 1px black;\n        font-size: 30px;\n      }\n      & img {\n        width: 250px;\n        margin-bottom: 5px;\n        border-bottom: solid 1px black;\n      }\n    }\n    & b {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      padding: 10px;\n      font-size: 16px;\n    }\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\nimport {List, Item} from './MovieList.styled'\n\nconst MovieList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <>\n      <List>\n        {movies.map(({ id, title, poster_path }) => (\n          <Item key={id}>\n            <Link to={`/movies/${id}`} state={{ from: location }}>\n              <div>\n                {poster_path ? (\n                  <img\n                    src={`https://image.tmdb.org/t/p/w500${poster_path}`}\n                    alt={`Poster ${title}`}\n                    width=\"250px\"\n                    height=\"375px\"\n                  />\n                ) : (\n                  <span>No poster</span>\n                )}\n                <b>{title}</b>\n              </div>\n            </Link>\n          </Item>\n        ))}\n      </List>\n    </>\n  );\n};\nMovieList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default MovieList;\n","import styled from '@emotion/styled'\n\nexport const Ring = styled.div`\ndisplay: flex;\njustify-content: center;\n`;","import { useState, useEffect } from 'react';\nimport { GetTrending } from '../../services/Api';\nimport MovieList from '../../components/MovieList';\nimport Loader from '../../components/Loader';\nimport  { Ring } from './Home.styled';\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    async function fetchMovies() {\n      try {\n        setIsLoading(true);\n        const data = await GetTrending();\n        setMovies(data);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    fetchMovies();\n  }, []);\n  return (\n    <main>\n      <h1>Trending today</h1>\n      {isLoading ?<Ring><Loader /></Ring>  : <MovieList movies={movies} />}\n    </main>\n  );\n};\n\nexport default Home;\n","import axios from 'axios';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '89c47b4059eaa0549c29c88014fa56ba';\n\nexport const GetTrending = async () => {\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  return response.data.results;\n};\n\nexport const MoviesId = async movieId => {\n  const { data } = await axios.get(`movie/${movieId}?api_key=${API_KEY}`);\n  return data;\n};\n\nexport const SearchMovies = async query => {\n  const response = await axios.get(\n    `search/movie?api_key=${API_KEY}&query=${query}`\n  );\n  return response.data.results;\n};\n\nexport const GetCredits = async movieId => {\n  const { data } = await axios.get(`movie/${movieId}/credits?api_key=${API_KEY}`);\n  return data;\n};\n\nexport const GetReviews = async movieId => {\n  const { data } = await axios.get(`movie/${movieId}/reviews?api_key=${API_KEY}`);\n  return data;\n};\n"],"names":["List","styled","Item","movies","location","useLocation","map","id","title","poster_path","to","state","from","src","alt","width","height","Ring","useState","setMovies","isLoading","setIsLoading","useEffect","GetTrending","data","console","log","fetchMovies","Loader","MovieList","axios","API_KEY","response","results","MoviesId","movieId","SearchMovies","query","GetCredits","GetReviews"],"sourceRoot":""}